#!/usr/bin/env python3

import sys

def extendedGCD(p, q):
    if (q == 0):
        return (p, 1, 0)
    vals = extendedGCD(q, p % q)
    return (vals[0], vals[2], vals[1] - vals[2] * (p // q))

def solve(a, b, m):
    a = a % m
    b = b % m
    gcd = extendedGCD(a, m)
    if (b % gcd[0] != 0):
        return None
    return (gcd[1] * (b // gcd[0])) % m

if __name__ == "__main__":
    # otherwise Python will fail because too much extendedGCD recursion
    sys.setrecursionlimit(2000)
    
    # obtained from the server
    e = 3
    d = 44099662569240083770100452501923890981810347032878178494549569926293640377794102787757812392102295343611476808834126649538952636114181616043006492565612847637935953145160211951331986860339486196832569683821120141014991379839508808414941455385036209313700326288366870889877799654511681743709353299322639045424737161223404842883211346043467541833205836604553399746326181139106884008412679110817142624390168364685584282908134947826592906891361640349523847551416712367526240125746834000852838264832774661329773724115660989856782878284849614002221996848649738605272015463464761741155635215695838441165137785286974315511355
    n = 66149493853860125655150678752885836472715520549317267741824354889440460566691154181636718588153443015417215213251189974308428954171272424064509738848419271456903929717740317926997980290509229295248854525731680211522487069759263212622412183077554313970550489432550306334816699481767522615564029948983958568137620658877310430228751724173392407096452402130591891085563316308684064273945573863484366971922314948362237647033045688312629960213147916734376716527936706960022935808934003360529947191458592952573768999508441911956808173380895703456745350452416319736699139180410176783788574649448360069042777614429267146945551
    c2 = 555197326820687822845510331497179235125339466901080486910855226563203620818546850664900334272558154897244807056051523382877025491022062653026950874706989089221441667975141857822467698984691394910413664568917834616477399551120134295817945851631274198716158916189852164710577201354848179364060363067031037364427257976432242368238133900381040554836326341802202448208567506144152953418971177837011508755732404288723827523795854985185948476628039747879323375293128273047932571155207763884307597378004378050070053742756331027480852317861759308073697411546007713846993873843230860015051875293239089946152466157009664950134
    r = 10657569616260118329404340834944716349573302183819435149128694785393343378737463193725664551171398971313585489634185044223763567210283228421322336466640716431124465773124614630377991915537115525004826903143400934299400374433218002815925291846775392164216151281973712468770631608862294981158069476777954388430091851221662753406685943465861825823022246167534811255026679837874465999186093902141814352480104598540063144133827422059918317985113532119825002361414848005564824947140564506090260655465903631363018380958302145031719465637060685617098378870594910675914122403158164788620459231729385876792019987208461650165272
    
    # linear congruence
    x = solve(pow(r, e, n), c2, n)
    
    # cube root
    flag = 0
    best = 0
    for pos in range(59, -1, -1):
        base = best
        mul = 10 ** pos
        for digit in range(10):
            flag = base + mul * digit
            if x - (flag ** 3) >= 0:
                best = flag
    print(best)
    print(bytes.fromhex(hex(best)[2:]))
