def anti_rotate(arr, seed):
	res = [0] * 0x40
	rotate_seed = seed & 7
	position_seed = seed >> 3
	for i in xrange(0x40):
		res[i] |= arr[(position_seed + i) & 0x3f] >> rotate_seed
		res[(i+0x3f) & 0x3f] |= (arr[(position_seed + i) & 0x3f] << (8 - rotate_seed)) & 0xff
	return res

def rotate(arr, seed):
	res = [0] * 0x40
	rotate_seed = seed & 7
	position_seed = seed >> 3
	for i in xrange(0x40):
		res[(position_seed + i) & 0x3f] = \
			((arr[i] << rotate_seed) & 0xff) | (arr[(i+0x3f) & 0x3f] >> (8 - rotate_seed))
	return res

def xor(arr1, arr2):
	res = []
	for i in xrange(0x40):
		res.append(arr1[i] ^ arr2[i])
	return res

def load(filename):
	f = open(filename, "rb")
	ret = f.read()
	f.close()
	return map(ord, ret)

key = [0xe1, 0xa9, 0xe1, 0x2e, 0x0b, 0x15, 0x44, 0x9c,
0x08, 0xdc, 0xdc, 0xf3, 0x1a, 0x91, 0x9c, 0x6e, 0x34, 0x5c, 0xe4, 0x5e, 0xf9, 0xe2, 0x5f, 0xf1,
0xf0, 0x86, 0x05, 0xa8, 0x70, 0x6e, 0x04, 0x53, 0x9d, 0x31, 0xec, 0x10, 0xab, 0xea, 0xf6, 0x74,
0x44, 0x79, 0x0f, 0x28, 0x53, 0x40, 0x37, 0x2c, 0x17, 0x9a, 0xc3, 0x67, 0x95, 0x2f, 0x4b, 0x27,
0xd9, 0x3f, 0xf9, 0x1d, 0x2a, 0x70, 0x77, 0x5d]

def decrypt(blocks, magic):
	res = []
	for i in xrange(0,len(blocks),0x40):
		block = blocks[i:i+0x40]
		block = anti_rotate(block, 0x4d)
		block = xor(block, magic)
		res += block
		magic = rotate(magic, 0x6f)
		magic = xor(magic, block)
	return "".join(map(chr,res))

print decrypt(load("data.enc"), key)